#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cmsformation:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(3332);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const { Server } = require("socket.io");
const Doc = require('../models/Doc');
const { Console } = require('console');
const { fstat } = require('fs');
var doc = require('../controllers/docs');
const io = new Server(server);
app.set('socketio', io)


io.on('connection', (socket) => {
  
  var destination;
  function checkFile(nom, size){
    if(size <= 30 * 1024 *1024){
      Doc.find({'link': './uploads/'+nom }, (err, doc)=>{
        if (err){
          console.log(err)
        }
        if(doc.length !== 0){
          socket.emit('FichierPresent','Ce fichier existe déjà sur le serveur');
        }else{
          socket.emit('success', 'fichier ok')
        }
      }) 
    }else{
     socket.emit('FichierLourd','Fichier trop lourd');
    }

  }
  function checkTitre(titre){
    Doc.find({'titre': titre}, (err, titre)=>{
      if(err){
        console.log(err)
      }
      if(titre.length !== 0){
        return true
        
      }else{
        return false
      }

    })

  }
  socket.on('File', (data)=>{

    var titre = checkTitre(data.title)
    if(titre){
      socket.emit('titrePresent', 'Veuillez changer le titre')
    }
    if(data.link && data.size && data.extension){
      var fichier = checkFile(data.link, data.size);
    }else{
      socket.emit('success', 'fichier ok')
    }
      
  })
  socket.on('envoi', (data)=>{  
    if(data.url == "AddDocs"){
      doc.addDoc;
      socket.emit('notif', 'reussi')
    }
    if(data.url == "UpdateDoc"){
      doc.postUpdateDoc;
      socket.emit('notif', 'success');
    }
  })
  socket.on('getApercu', (data)=>{
    Doc.findOne({'_id': data}, {'link':1, 'extension':1}, (err, data)=>{
      console.log(data)
      var link = data.link;
      var extension = data.extension
      var data = [extension, link];

      socket.emit('link', data)
    })

  })
  socket.on('doc', (data)=>{
    if(data){
      Doc.findById({'_id': data}, (err, doc)=>{
        if (err) throw err;
        Doc.find({},{'domaine': 1}, (err, domaine)=>{
          let domaines = [];
         
          for( let i = 0; i< domaine.length; i++){
            if(domaines.indexOf(domaine[i].domaine) === -1){
              domaines.push(domaine[i].domaine )
            }
          }
          var obj = {
            domaine: domaines,
            document: doc
          }

        socket.emit('docModif', obj )
      })
  })
} 
  })
  socket.on('selectService', (data)=>{
   
    const result =  fs.readFileSync('controllers/organigramme/'+data+'.csv', 'utf8', function(err, data) {
      if (err) throw err;
    });
   var roles = result.split(',\n')
    socket.emit('roles', roles)
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
