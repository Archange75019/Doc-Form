#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cmsformation:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(3330);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const { Server } = require("socket.io");
const Doc = require('../models/Doc');
const { Console } = require('console');
const io = new Server(server);
app.set('socketio', io)


io.on('connection', (socket) => {
  function checkFile(nom, size){

    if(size <= 30 * 1024 *1024){

      Doc.find({'link': './uploads/'+nom }, (err, doc)=>{
        if (err){
          console.log(err)
        }
        if(doc.length !== 0){
         
          socket.emit('FichierPresent','Fichier déjà présent sur le serveur');

        }else{
          socket.emit('success', 'fichier ok')
        }
      }) 
    }else{
     socket.emit('FichierLourd','Fichier trop lourd');
    }

  }
  function checkTitre(titre){
    Doc.find({'titre': titre}, (err, titre)=>{
      if(err){
        console.log(err)
      }
      if(titre.length !== 0){
        return true
        
      }else{
        return false
      }

    })

  }
  socket.on('File', (data)=>{
    var titre = checkTitre(data.title)
    if(titre){
      socket.emit('titrePresent', 'Veuillez changer le titre')
    }
      var fichier = checkFile(data.link, data.size);
  })
  socket.on('envoi', (data)=>{
    if(data){
      socket.emit('notif', 'reussi')

    }
  })
 
  
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
